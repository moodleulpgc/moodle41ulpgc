{"version":3,"file":"modal_notice.min.js","sources":["../src/modal_notice.js"],"sourcesContent":["/**\n * Notice modal.\n * @author     Nathan Nguyen <nathannguyen@catalyst-au.net>\n * @copyright  Catalyst IT\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/notification', 'core/modal', 'core/modal_registry', 'core/key_codes', 'core/str'],\n    function($, Notification, Modal, ModalRegistry, KeyCodes, str) {\n\n        var registered = false;\n\n        var SELECTORS = {\n            CLOSE_BUTTON: '[data-action=\"close\"]',\n            ACCEPT_BUTTON: '[data-action=\"accept\"]',\n            ACK_CHECKBOX: 'sitenotice-modal-ackcheckbox',\n            CAN_RECEIVE_FOCUS: 'input:not([type=\"hidden\"]), a[href], button:not([disabled])',\n            TOOL_TIP_WRAPPER: '#tooltip-wrapper',\n        };\n\n        var ATTRIBUTE = {\n            NOTICE_ID: 'data-noticeid',\n            REQUIRED_ACKNOWLEDGE: 'data-noticereqack',\n        };\n\n        var ModalNotice = function(root) {\n            Modal.call(this, root);\n\n            if (!this.getFooter().find(SELECTORS.CLOSE_BUTTON).length) {\n                Notification.exception({message: 'No close button found'});\n            }\n\n            if (!this.getFooter().find(SELECTORS.ACCEPT_BUTTON).length) {\n                Notification.exception({message: 'No accept button found'});\n            }\n        };\n\n        ModalNotice.TYPE = 'local_sitenotice';\n        ModalNotice.prototype = Object.create(Modal.prototype);\n        ModalNotice.prototype.constructor = ModalNotice;\n\n        if (!registered) {\n            ModalRegistry.register(ModalNotice.TYPE, ModalNotice, 'local_sitenotice/modal_notice');\n            registered = true;\n        }\n\n        /**\n         * Get ID of close button.\n         * @returns {string}\n         */\n        ModalNotice.prototype.getCloseButtonID = function() {\n            return '#' + this.getFooter().find(SELECTORS.CLOSE_BUTTON).attr('id');\n        };\n\n        /**\n         * Get ID of accept button.\n         * @returns {string}\n         */\n        ModalNotice.prototype.getAcceptButtonID = function() {\n            return '#' + this.getFooter().find(SELECTORS.ACCEPT_BUTTON).attr('id');\n        };\n\n        /**\n         * Get ID of accept button.\n         * @returns {string}\n         */\n        ModalNotice.prototype.getAckCheckboxID = function() {\n            return '#' + SELECTORS.ACK_CHECKBOX;\n        };\n\n        /**\n         * Set Notice ID to the current modal.\n         * @param {Integer} noticeid\n         */\n        ModalNotice.prototype.setNoticeId = function(noticeid) {\n            this.getModal().attr(ATTRIBUTE.NOTICE_ID, noticeid);\n        };\n\n        /**\n         * Get the current notice id.\n         * @returns {*}\n         */\n        ModalNotice.prototype.getNoticeId = function() {\n            return this.getModal().attr(ATTRIBUTE.NOTICE_ID);\n        };\n\n        /**\n         * Add Checkbox if the notice requires acknowledgement.\n         * @param {Integer} reqack\n         */\n        ModalNotice.prototype.setRequiredAcknowledgement = function(reqack) {\n            var modal  = this;\n            if (reqack == 1) {\n                str.get_string('modal:checkboxtext', 'local_sitenotice').then(function(langString) {\n                    var body = modal.getBody();\n                    var checkboxdiv = $(\"<div>\", {});\n                    var ackcheckbox = $(\"<input>\", {type: \"checkbox\", id: SELECTORS.ACK_CHECKBOX});\n                    var labelspan = $(\"<span>\", {class: \"checkboxlabel\"});\n                    labelspan.append(langString);\n                    checkboxdiv.append(ackcheckbox);\n                    checkboxdiv.append(labelspan);\n                    body.append(checkboxdiv);\n                    var acceptbutton = modal.getFooter().find(SELECTORS.ACCEPT_BUTTON);\n                    acceptbutton.show();\n                    acceptbutton.attr('disabled', true);\n                    // Tooltip for disabled box.\n                    modal.getFooter().find(SELECTORS.TOOL_TIP_WRAPPER).tooltip();\n                }).catch(Notification.exception);\n            } else {\n                this.getFooter().find(SELECTORS.ACCEPT_BUTTON).css('display', 'none');\n            }\n        };\n\n        /**\n         * Turn off tool tip\n         */\n        ModalNotice.prototype.turnoffToolTip = function() {\n            this.getFooter().find(SELECTORS.TOOL_TIP_WRAPPER).tooltip('disable');\n        };\n\n        /**\n         * Turn on tool tip\n         */\n        ModalNotice.prototype.turnonToolTip = function() {\n            this.getFooter().find(SELECTORS.TOOL_TIP_WRAPPER).tooltip('enable');\n        };\n\n        /**\n         * Remove escape key event.\n         */\n        ModalNotice.prototype.registerEventListeners = function() {\n            $(document).on('keydown', function(e) {\n                if (!this.isVisible()) {\n                    return;\n                }\n\n                if (e.keyCode == KeyCodes.tab) {\n                    this.handleTabLock(e);\n                }\n\n            }.bind(this));\n\n            $(document).on('mousedown', function(e) {\n                if (!this.isVisible()) {\n                    return;\n                }\n                e.preventDefault();\n\n            }.bind(this));\n        };\n\n        /**\n         * CAN_RECEIVE_FOCUS in modal.js does not check if the disabled or hidden button\n         * @param {Event} e\n         */\n        ModalNotice.prototype.handleTabLock = function(e) {\n            var target = $(document.activeElement);\n\n            var focusableElements = this.modal.find(SELECTORS.CAN_RECEIVE_FOCUS).filter(\":visible\");\n            var firstFocusable = focusableElements.first();\n            var lastFocusable = focusableElements.last();\n\n            var focusable = false;\n            var previous = 0;\n            focusableElements.each(function(index) {\n                if (target.is(this)) {\n                    focusable = true;\n                    previous = index;\n                }\n            });\n\n            // Focus to first element.\n            if (focusable == false) {\n                e.preventDefault();\n                firstFocusable.focus();\n                return;\n            } else {\n                if (target.is(firstFocusable) && e.shiftKey) {\n                    lastFocusable.focus();\n                    e.preventDefault();\n                } else if (target.is(lastFocusable) && !e.shiftKey) {\n                    firstFocusable.focus();\n                    e.preventDefault();\n                } else {\n                    if (!e.shiftKey) {\n                        var next = focusableElements.get(previous+1);\n                    } else {\n                        var next = focusableElements.get(previous-1);\n                    }\n                    next.focus();\n                    e.preventDefault();\n                }\n            }\n        };\n\n        return ModalNotice;\n    }\n);\n"],"names":["define","$","Notification","Modal","ModalRegistry","KeyCodes","str","registered","SELECTORS","ATTRIBUTE","ModalNotice","root","call","this","getFooter","find","length","exception","message","TYPE","prototype","Object","create","constructor","register","getCloseButtonID","attr","getAcceptButtonID","getAckCheckboxID","setNoticeId","noticeid","getModal","getNoticeId","setRequiredAcknowledgement","reqack","modal","get_string","then","langString","body","getBody","checkboxdiv","ackcheckbox","type","id","labelspan","class","append","acceptbutton","show","tooltip","catch","css","turnoffToolTip","turnonToolTip","registerEventListeners","document","on","e","isVisible","keyCode","tab","handleTabLock","bind","preventDefault","target","activeElement","focusableElements","filter","firstFocusable","first","lastFocusable","last","focusable","previous","each","index","is","focus","shiftKey","next","get"],"mappings":"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"}