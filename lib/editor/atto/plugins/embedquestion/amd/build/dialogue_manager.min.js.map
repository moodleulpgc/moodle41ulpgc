{"version":3,"file":"dialogue_manager.min.js","sources":["../src/dialogue_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manages the question selection form.\n *\n * @module    atto_embedquestion/dialogue_manager\n * @copyright 2018 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/notification',\n    'core/fragment',\n    'core/templates',\n    'core/ajax'\n], function(\n    $,\n    Notification,\n    Fragment,\n    Templates,\n    Ajax\n) {\n    'use strict';\n\n    /**\n     * Constructor for an object that handles one occurrence of showing the dialogue.\n     *\n     * @param {EditorPlugin} button - the editor toolbar button that has just been clicked.\n     */\n    function DialogueHandler(button) {\n        var currentSelection, dialogue, existingCode;\n\n        currentSelection = button.get('host').getSelection();\n\n        // The wrapper div's loading icon will be replaced with form contents.\n        dialogue = button.getDialogue({\n            headerContent: M.util.get_string('pluginname', 'atto_embedquestion'),\n            focusAfterHide: true\n        }, true);\n        dialogue.set('bodyContent', '<div class=\"atto_embedquestion-wrap\">' +\n                '<img class=\"icon\" src=\"' + M.util.image_url('y/loading') + '\" alt=\"' +\n                M.util.get_string('loading', 'atto_embedquestion') + '\">' +\n                '</div>');\n        dialogue.show();\n\n        existingCode = button.getEmbedCodeAtSelection();\n        if (existingCode) {\n            existingCode = existingCode.embedCode;\n        }\n\n        // Replace with the form.\n        Fragment.loadFragment('atto_embedquestion', 'questionselector', button.get('contextid'),\n                {contextId: button.get('contextid'), embedCode: existingCode}\n                ).done(function(html, js) {\n                    niceReplaceNodeContents($('.atto_embedquestion-wrap'), html, js, dialogue);\n                }\n                ).fail(Notification.exception);\n\n        /**\n         * This function fades out one lot of content and fades in some new content.\n         *\n         * @param {JQuery} node - Element or selector to replace.\n         * @param {String} html - HTML to insert / replace.\n         * @param {String} js - Javascript to run after the insertion.\n         * @returns {Promise} - a promise that resolves when the animation is complete.\n         */\n        function niceReplaceNodeContents(node, html, js) {\n            var promise = $.Deferred();\n            node.fadeOut(\"fast\", function() {\n                Templates.replaceNodeContents(node, html, js);\n                node.fadeIn(\"fast\", function() {\n                    promise.resolve();\n                    $('#embedqform #id_submitbutton').on('click', getEmbedCode);\n                    setupCentreing();\n                });\n            });\n            return promise.promise();\n        }\n\n        /**\n         * Called after the form in the dialogue has finished loading.\n         *\n         * Centre the dialogue now, and ensure it re-centres whenever a\n         * form section is expanded or collapsed.\n         */\n        function setupCentreing() {\n            dialogue.centerDialogue();\n            var observer = new MutationObserver(dialogueResized);\n            $('#embedqform fieldset.collapsible').each(function(index, node) {\n                observer.observe(node, { attributes: true, attributeFilter: ['class'] });\n            });\n        }\n\n        /**\n         * Re-centre the dialogue.\n         */\n        function dialogueResized() {\n            dialogue.centerDialogue();\n        }\n\n        /**\n         * Handler for when the form button is clicked.\n         *\n         * Make an AJAX request ot the server to get the embed code.\n         *\n         * @param {Event} e - the click event.\n         */\n        function getEmbedCode(e) {\n            e.preventDefault();\n            Ajax.call([{\n                methodname: 'filter_embedquestion_get_embed_code',\n                args: {\n                    courseid: $('input[name=courseid]').val(),\n                    categoryidnumber: $('select#id_categoryidnumber').val(),\n                    questionidnumber: $('select#id_questionidnumber').val(),\n                    behaviour: $('select#id_behaviour').val(),\n                    maxmark: $('input#id_maxmark').val(),\n                    variant: $('input#id_variant').val(),\n                    correctness: $('select#id_correctness').val(),\n                    marks: $('select#id_marks').val(),\n                    markdp: $('select#id_markdp').val(),\n                    feedback: $('select#id_feedback').val(),\n                    generalfeedback: $('select#id_generalfeedback').val(),\n                    rightanswer: $('select#id_rightanswer').val(),\n                    history: $('select#id_history').val(),\n                    forcedlanguage: $('select#id_forcedlanguage').val() || ''\n                }\n            }])[0].done(insertEmbedCode);\n        }\n\n        /**\n         * Handles when we get the embed code from the AJAX request.\n         *\n         * @param {String} embedCode - the embed code to insert.\n         */\n        function insertEmbedCode(embedCode) {\n            var dialogue, host, parent, text, existingCode;\n\n            // Hide the dialogue and blank the contents.\n            dialogue = button.getDialogue({\n                focusAfterHide: null\n            });\n            dialogue.hide();\n\n            host = button.get('host');\n\n            // Focus on the last point.\n            host.setSelection(currentSelection);\n\n            existingCode = button.getEmbedCodeAtSelection();\n            if (existingCode) {\n                // Replace the existing code.\n                parent = host.getSelectionParentNode();\n                text = parent.textContent;\n                parent.textContent = text.slice(0, existingCode.start) +\n                        embedCode + text.slice(existingCode.end);\n            } else {\n                // Otherwise insert the embed code.\n                host.insertContentAtFocusPoint(embedCode);\n            }\n\n            // Mark the text area as updated.\n            button.markUpdated();\n        }\n    }\n\n    return {\n        /**\n         * Show the dialogue when the button in a particular editor was clicked,\n         * then handle the interaction with it.\n         *\n         * @param {EditorPlugin} button - the editor toolbar button that has just been clicked.\n         */\n        showDialogueFor: function(button) {\n            new DialogueHandler(button);\n        }\n    };\n});\n"],"names":["define","$","Notification","Fragment","Templates","Ajax","DialogueHandler","button","currentSelection","dialogue","existingCode","dialogueResized","centerDialogue","getEmbedCode","e","preventDefault","call","methodname","args","courseid","val","categoryidnumber","questionidnumber","behaviour","maxmark","variant","correctness","marks","markdp","feedback","generalfeedback","rightanswer","history","forcedlanguage","done","insertEmbedCode","embedCode","host","parent","text","getDialogue","focusAfterHide","hide","get","setSelection","getEmbedCodeAtSelection","getSelectionParentNode","textContent","slice","start","end","insertContentAtFocusPoint","markUpdated","getSelection","headerContent","M","util","get_string","set","image_url","show","loadFragment","contextId","html","js","node","promise","Deferred","fadeOut","replaceNodeContents","fadeIn","resolve","on","observer","MutationObserver","each","index","observe","attributes","attributeFilter","setupCentreing","niceReplaceNodeContents","fail","exception","showDialogueFor"],"mappings":";;;;;;;AAsBAA,6CAAO,CACH,SACA,oBACA,gBACA,iBACA,cACD,SACCC,EACAC,aACAC,SACAC,UACAC,eASSC,gBAAgBC,YACjBC,iBAAkBC,SAAUC,sBAkEvBC,kBACLF,SAASG,0BAUJC,aAAaC,GAClBA,EAAEC,iBACFV,KAAKW,KAAK,CAAC,CACPC,WAAY,sCACZC,KAAM,CACFC,SAAUlB,EAAE,wBAAwBmB,MACpCC,iBAAkBpB,EAAE,8BAA8BmB,MAClDE,iBAAkBrB,EAAE,8BAA8BmB,MAClDG,UAAWtB,EAAE,uBAAuBmB,MACpCI,QAASvB,EAAE,oBAAoBmB,MAC/BK,QAASxB,EAAE,oBAAoBmB,MAC/BM,YAAazB,EAAE,yBAAyBmB,MACxCO,MAAO1B,EAAE,mBAAmBmB,MAC5BQ,OAAQ3B,EAAE,oBAAoBmB,MAC9BS,SAAU5B,EAAE,sBAAsBmB,MAClCU,gBAAiB7B,EAAE,6BAA6BmB,MAChDW,YAAa9B,EAAE,yBAAyBmB,MACxCY,QAAS/B,EAAE,qBAAqBmB,MAChCa,eAAgBhC,EAAE,4BAA4BmB,OAAS,OAE3D,GAAGc,KAAKC,0BAQPA,gBAAgBC,eACPC,KAAMC,OAAQC,KAAM7B,aAGvBH,OAAOiC,YAAY,CAC1BC,eAAgB,OAEXC,QAETL,KAAO9B,OAAOoC,IAAI,SAGbC,aAAapC,mBAElBE,aAAeH,OAAOsC,4BAIlBN,MADAD,OAASD,KAAKS,0BACAC,YACdT,OAAOS,YAAcR,KAAKS,MAAM,EAAGtC,aAAauC,OACxCb,UAAYG,KAAKS,MAAMtC,aAAawC,MAG5Cb,KAAKc,0BAA0Bf,WAInC7B,OAAO6C,cAlIX5C,iBAAmBD,OAAOoC,IAAI,QAAQU,gBAGtC5C,SAAWF,OAAOiC,YAAY,CAC1Bc,cAAeC,EAAEC,KAAKC,WAAW,aAAc,sBAC/ChB,gBAAgB,IACjB,IACMiB,IAAI,cAAe,+DACQH,EAAEC,KAAKG,UAAU,aAAe,UAC5DJ,EAAEC,KAAKC,WAAW,UAAW,sBAFT,YAI5BhD,SAASmD,QAETlD,aAAeH,OAAOsC,6BAElBnC,aAAeA,aAAa0B,WAIhCjC,SAAS0D,aAAa,qBAAsB,mBAAoBtD,OAAOoC,IAAI,aACnE,CAACmB,UAAWvD,OAAOoC,IAAI,aAAcP,UAAW1B,eAC9CwB,MAAK,SAAS6B,KAAMC,cAaGC,KAAMF,KAAMC,QACrCE,QAAUjE,EAAEkE,WAChBF,KAAKG,QAAQ,QAAQ,WACjBhE,UAAUiE,oBAAoBJ,KAAMF,KAAMC,IAC1CC,KAAKK,OAAO,QAAQ,WAChBJ,QAAQK,UACRtE,EAAE,gCAAgCuE,GAAG,QAAS3D,yBActDJ,SAASG,qBACL6D,SAAW,IAAIC,iBAAiB/D,iBACpCV,EAAE,oCAAoC0E,MAAK,SAASC,MAAOX,MACvDQ,SAASI,QAAQZ,KAAM,CAAEa,YAAY,EAAMC,gBAAiB,CAAC,cAhBzDC,SAGDd,QAAQA,UAtBPe,CAAwBhF,EAAE,4BAA6B8D,KAAMC,OAE/DkB,KAAKhF,aAAaiF,iBA8GzB,CAOHC,gBAAiB,SAAS7E,YAClBD,gBAAgBC"}