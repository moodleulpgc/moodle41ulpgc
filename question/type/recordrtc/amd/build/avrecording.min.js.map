{"version":3,"file":"avrecording.min.js","sources":["../src/avrecording.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n/**\n * JavaScript to the recording work.\n *\n * We would like to thank the creators of atto_recordrtc, whose\n * work originally inspired this.\n *\n * This script uses some third-party JavaScript and loading that within Moodle/ES6\n * requires some contortions. The main classes here are:\n *\n * * Recorder - represents one recording widget. This works in a way that is\n *   not particularly specific to this question type.\n * * RecordRtcQuestion - represents one question, which may contain several recorders.\n *   It deals with the interaction between the recorders and the question.\n *\n * @module    qtype_recordrtc/avrecording\n * @copyright 2019 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Log from 'core/log';\nimport ModalFactory from 'core/modal_factory';\n\n/**\n * Verify that the question type can work. If not, show a warning.\n *\n * @return {string} 'ok' if it looks OK, else 'nowebrtc' or 'nothttps' if there is a problem.\n */\nfunction checkCanWork() {\n    // Check APIs are known.\n    if (!(navigator.mediaDevices && window.MediaRecorder)) {\n        return 'nowebrtc';\n    }\n\n    // Check protocol (localhost).\n    if (location.protocol === 'https:' ||\n            location.host === 'localhost' || location.host === '127.0.0.1') {\n        return 'ok';\n    } else {\n        return 'nothttps';\n    }\n}\n\n/**\n * Object for actually doing the recording.\n *\n * The recorder can be in one of several states, which is stored in a data-state\n * attribute on the outer span (widget). The states are:\n *\n *  - new:       there is no recording yet. Button shows 'Start recording' (audio) or 'Start camera' (video).\n *  - starting:  (video only) camera has started, but we are not recording yet. Button show 'Start recording'.\n *  - recording: Media is being recorded. Pause button visible if allowed. Main button shows 'Stop'. Countdown displayed.\n *  - paused:    If pause was pressed. Media recording paused, but resumable. Pause button changed to say 'resume'.\n *  - saving:    Media being uploaded. Progress indication shown. Pause button hidden if was visible.\n *  - recorded:  Recording and upload complete. The button then shows 'Record again'.\n *\n * @param {HTMLElement} widget the DOM node that is the top level of the whole recorder.\n * @param {(AudioSettings|VideoSettings)} mediaSettings information about the media type.\n * @param {Object} owner the object we are doing the recording for. Must provide three callback functions\n *                       showAlert notifyRecordingComplete notifyButtonStatesChanged.\n * @param {Object} uploadInfo object with fields uploadRepositoryId, draftItemId, contextId and maxUploadSize.\n * @constructor\n */\nfunction Recorder(widget, mediaSettings, owner, uploadInfo) {\n    /**\n     * @type {Recorder} reference to this recorder, for use in event handlers.\n     */\n    const recorder = this;\n\n    /**\n     * @type {MediaStream} during recording, the stream of incoming media.\n     */\n    let mediaStream = null;\n\n    /**\n     * @type {MediaRecorder} the recorder that is capturing stream.\n     */\n    let mediaRecorder = null;\n\n    /**\n     * @type {Blob[]} the chunks of data that have been captured so far during the current recording.\n     */\n    let chunks = [];\n\n    /**\n     * @type {number} number of bytes recorded so far, so we can auto-stop\n     * before hitting Moodle's file-size limit.\n     */\n    let bytesRecordedSoFar = 0;\n\n    /**\n     * @type {number} when paused, the time left in milliseconds, so we can auto-stop at the time limit.\n     */\n    let timeRemaining = 0;\n\n    /**\n     * @type {number} while recording, the time we reach the time-limit, so we can auto-stop then.\n     * This is milliseconds since Unix epoch, so comparable with Date.now().\n     */\n    let stopTime = 0;\n\n    /**\n     * @type {number} intervalID returned by setInterval() while the timer is running.\n     */\n    let countdownTicker = 0;\n\n    const button = widget.querySelector('button.qtype_recordrtc-main-button');\n    const pauseButton = widget.querySelector('.qtype_recordrtc-pause-button button');\n    const controlRow = widget.querySelector('.qtype_recordrtc-control-row');\n    const mediaElement = widget.querySelector('.qtype_recordrtc-media-player ' +\n        (mediaSettings.name === 'screen' ? 'video' : mediaSettings.name));\n    const noMediaPlaceholder = widget.querySelector('.qtype_recordrtc-no-recording-placeholder');\n    const timeDisplay = widget.querySelector('.qtype_recordrtc-time-left');\n    const progressBar = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front');\n    const backTimeEnd = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-back span.timer-end');\n    const backtimeStart = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-back span.timer-start');\n    const frontTimeEnd = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front span.timer-end');\n    const fronttimeStart = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front span.timer-start');\n\n    widget.addEventListener('click', handleButtonClick);\n    this.uploadMediaToServer = uploadMediaToServer; // Make this method available.\n\n    /**\n     * Handles clicks on the start/stop and pause buttons.\n     *\n     * @param {Event} e\n     */\n    function handleButtonClick(e) {\n        const clickedButton = e.target.closest('button');\n        if (!clickedButton) {\n            return; // Not actually a button click.\n        }\n        e.preventDefault();\n        switch (widget.dataset.state) {\n            case 'new':\n            case 'recorded':\n                startRecording();\n                break;\n            case 'starting':\n                if (mediaSettings.name === 'screen') {\n                    startScreenSaving();\n                } else {\n                    startSaving();\n                }\n                break;\n            case 'recording':\n                if (clickedButton === pauseButton) {\n                    pause();\n                } else {\n                    stopRecording();\n                }\n                break;\n            case 'paused':\n                if (clickedButton === pauseButton) {\n                    resume();\n                } else {\n                    stopRecording();\n                }\n                break;\n        }\n    }\n\n    /**\n     * To handle every time the audio mic has a problem.\n     * For now, we will allow video to be saved without sound when there is an error with the microphone.\n     *\n     * @param {Object} error A error object.\n     */\n    function handleScreenSharingError(error) {\n        Log.debug(error);\n        startSaving();\n    }\n\n    /**\n     * When recorder type is screen, we need add audio mic stream into mediaStream\n     * before saving.\n     */\n    function startScreenSaving() {\n        // We need to combine 2 audio and screen-sharing streams to create a recording with audio from the mic.\n        navigator.mediaDevices.enumerateDevices().then(() => {\n            // Get audio stream from microphone.\n            return navigator.mediaDevices.getUserMedia({audio: true});\n        }).then(micStream => {\n            let composedStream = new MediaStream();\n            // When the user shares their screen, we need to merge the video track from the media stream with\n            // the audio track from the microphone stream and stop any unnecessary tracks to ensure\n            // that the recorded video has microphone sound.\n            mediaStream.getTracks().forEach(function(track) {\n                if (track.kind === 'video') {\n                    // Add video track into stream.\n                    composedStream.addTrack(track);\n                } else {\n                    // Stop any audio track.\n                    track.stop();\n                }\n            });\n\n            // Add mic audio track from mic stream into composedStream to track audio.\n            // This will make sure the recorded video will have mic sound.\n            micStream.getAudioTracks().forEach(function(micTrack) {\n                composedStream.addTrack(micTrack);\n            });\n            mediaStream = composedStream;\n            startSaving();\n            return true;\n        }).catch(handleScreenSharingError);\n    }\n\n    /**\n     * Start recording (because the button was clicked).\n     */\n    function startRecording() {\n\n        // Reset timer label.\n        setLabelForTimer(0, parseInt(widget.dataset.maxRecordingDuration));\n\n        if (mediaSettings.name === 'audio') {\n            mediaElement.parentElement.classList.add('hide');\n            noMediaPlaceholder.classList.add('hide');\n            timeDisplay.classList.remove('hide');\n\n        } else {\n            mediaElement.parentElement.classList.remove('hide');\n            noMediaPlaceholder.classList.add('hide');\n        }\n        pauseButton?.parentElement.classList.remove('hide');\n\n        // Change look of recording button.\n        button.classList.remove('btn-outline-danger');\n        button.classList.add('btn-danger');\n\n        // Disable other question buttons when current widget stared recording.\n        disableAllButtons();\n\n        // Empty the array containing the previously recorded chunks.\n        chunks = [];\n        bytesRecordedSoFar = 0;\n        if (mediaSettings.name === 'screen') {\n            navigator.mediaDevices.getDisplayMedia(mediaSettings.mediaConstraints)\n                .then(handleCaptureStarting)\n                .catch(handleCaptureFailed);\n        } else {\n            navigator.mediaDevices.getUserMedia(mediaSettings.mediaConstraints)\n                .then(handleCaptureStarting)\n                .catch(handleCaptureFailed);\n        }\n    }\n\n    /**\n     * Callback once getUserMedia has permission from the user to access the recording devices.\n     *\n     * @param {MediaStream} stream the stream to record.\n     */\n    function handleCaptureStarting(stream) {\n        mediaStream = stream;\n\n        // Setup the UI for during recording.\n        mediaElement.srcObject = stream;\n        mediaElement.muted = true;\n        if (mediaSettings.name === 'audio') {\n            startSaving();\n        } else {\n            // Cover when user clicks Browser's \"Stop Sharing Screen\" button.\n            if (mediaSettings.name === 'screen') {\n                mediaStream.getVideoTracks()[0].addEventListener('ended', handleStopSharing);\n            }\n            mediaElement.play();\n            mediaElement.controls = false;\n\n            widget.dataset.state = 'starting';\n            setButtonLabel('startrecording');\n            widget.querySelector('.qtype_recordrtc-stop-button').disabled = false;\n        }\n\n        // Make button clickable again, to allow starting/stopping recording.\n        if (pauseButton) {\n            pauseButton.disabled = false;\n        }\n        button.disabled = false;\n        button.focus();\n    }\n\n    /**\n     * For recording types which show the media during recording,\n     * this starts the loop-back display, but does not start recording it yet.\n     */\n    function startSaving() {\n        // Initialize MediaRecorder events and start recording.\n        mediaRecorder = new MediaRecorder(mediaStream, getRecordingOptions());\n\n        mediaRecorder.ondataavailable = handleDataAvailable;\n        mediaRecorder.onpause = handleDataAvailable;\n        mediaRecorder.onstop = handleRecordingHasStopped;\n        mediaRecorder.start(1000); // Capture in one-second chunks. Firefox requires that.\n\n        widget.dataset.state = 'recording';\n        // Set duration for progressbar and start animate.\n        progressBar.style.animationDuration = widget.dataset.maxRecordingDuration + 's';\n        progressBar.classList.add('animate');\n        setButtonLabel('stoprecording');\n        startCountdownTimer();\n        if (mediaSettings.name === 'video' || mediaSettings.name === 'screen') {\n            button.parentElement.classList.add('hide');\n            controlRow.classList.remove('hide');\n            controlRow.classList.add('d-flex');\n            timeDisplay.classList.remove('hide');\n        }\n    }\n\n    /**\n     * Callback that is called by the user clicking Stop screen sharing on the browser.\n     */\n    function handleStopSharing() {\n        if (widget.dataset.state === 'starting') {\n            widget.dataset.state = 'new';\n            mediaElement.parentElement.classList.add('hide');\n            noMediaPlaceholder.classList.remove('hide');\n            setButtonLabel('startsharescreen');\n            button.blur();\n        } else {\n            const controlEl = widget.querySelector('.qtype_recordrtc-control-row');\n            if (!controlEl.classList.contains('hide')) {\n                controlEl.querySelector('.qtype_recordrtc-stop-button').click();\n            }\n        }\n        enableAllButtons();\n    }\n\n    /**\n     * Callback that is called by the media system for each Chunk of data.\n     *\n     * @param {BlobEvent} event\n     */\n    function handleDataAvailable(event) {\n        if (!event.data) {\n            return; // It seems this can happen around pausing.\n        }\n\n        // Check there is space to store the next chunk, and if not stop.\n        bytesRecordedSoFar += event.data.size;\n        if (uploadInfo.maxUploadSize >= 0 && bytesRecordedSoFar >= uploadInfo.maxUploadSize) {\n\n            // Extra check to avoid alerting twice.\n            if (!localStorage.getItem('alerted')) {\n                localStorage.setItem('alerted', 'true');\n                stopRecording();\n                owner.showAlert('nearingmaxsize');\n\n            } else {\n                localStorage.removeItem('alerted');\n            }\n        }\n\n        // Store the next chunk of data.\n        chunks.push(event.data);\n\n        // Notify form-change-checker that there is now unsaved data.\n        // But, don't do this in question preview where it is just annoying.\n        if (typeof M.core_formchangechecker !== 'undefined' &&\n            !window.location.pathname.endsWith('/question/preview.php')) {\n            M.core_formchangechecker.set_form_changed();\n        }\n    }\n\n    /**\n     * Pause recording.\n     */\n    function pause() {\n        // Stop the count-down timer.\n        stopCountdownTimer();\n        setPauseButtonLabel('resume');\n        mediaRecorder.pause();\n        widget.dataset.state = 'paused';\n        // Pause animate.\n        toggleProgressbarState();\n    }\n\n    /**\n     * Continue recording.\n     */\n    function resume() {\n        // Stop the count-down timer.\n        resumeCountdownTimer();\n        widget.dataset.state = 'recording';\n        setPauseButtonLabel('pause');\n        mediaRecorder.resume();\n        // Resume animate.\n        toggleProgressbarState();\n    }\n\n    /**\n     * Start recording (because the button was clicked or because we have reached a limit).\n     */\n    function stopRecording() {\n        // Disable the button while things change.\n        button.disabled = true;\n\n        // Stop the count-down timer.\n        stopCountdownTimer();\n\n        // Update the button.\n        button.classList.remove('btn-danger');\n        button.classList.add('btn-outline-danger');\n        if (pauseButton) {\n            setPauseButtonLabel('pause');\n            pauseButton.parentElement.classList.add('hide');\n        }\n\n        // Reset animation state.\n        progressBar.style.animationPlayState = 'running';\n        // Stop animate.\n        progressBar.classList.remove('animate');\n\n        // Ask the recording to stop.\n        mediaRecorder.stop();\n\n        // Also stop each individual MediaTrack.\n        const tracks = mediaStream.getTracks();\n        for (let i = 0; i < tracks.length; i++) {\n            tracks[i].stop();\n        }\n    }\n\n    /**\n     * Callback that is called by the media system once recording has finished.\n     */\n    function handleRecordingHasStopped() {\n        if (widget.dataset.state === 'new') {\n            // This can happens if an error occurs when recording is starting. Do nothing.\n            return;\n        }\n\n        // Set source of the media player.\n        const blob = new Blob(chunks, {type: mediaRecorder.mimeType});\n        mediaElement.srcObject = null;\n        mediaElement.src = URL.createObjectURL(blob);\n\n        // Show audio player with controls enabled, and unmute.\n        mediaElement.muted = false;\n        mediaElement.controls = true;\n        mediaElement.parentElement.classList.remove('hide');\n        noMediaPlaceholder.classList.add('hide');\n        mediaElement.focus();\n\n        if (mediaSettings.name === 'audio') {\n            timeDisplay.classList.add('hide');\n\n        } else {\n            button.parentElement.classList.remove('hide');\n            controlRow.classList.add('hide');\n            controlRow.classList.remove('d-flex');\n        }\n\n        // Ensure the button while things change.\n        button.disabled = true;\n        button.classList.remove('btn-danger');\n        button.classList.add('btn-outline-danger');\n        widget.dataset.state = 'recorded';\n\n        if (chunks.length > 0) {\n            owner.notifyRecordingComplete(recorder);\n        }\n    }\n\n    /**\n     * Function that handles errors from the recorder.\n     *\n     * @param {DOMException} error\n     */\n    function handleCaptureFailed(error) {\n        Log.debug('Audio/video/screen question: error received');\n        Log.debug(error);\n\n        setPlaceholderMessage('recordingfailed');\n        setButtonLabel('recordagainx');\n        button.classList.remove('btn-danger');\n        button.classList.add('btn-outline-danger');\n        widget.dataset.state = 'new';\n        // Hide time display.\n        timeDisplay.classList.add('hide');\n\n        if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n            mediaRecorder.stop();\n        }\n\n        // Changes 'CertainError' -> 'gumcertain' to match language string names.\n        const stringName = 'gum' + error.name.replace('Error', '').toLowerCase();\n\n        owner.showAlert(stringName);\n        enableAllButtons();\n    }\n\n    /**\n     * Start the countdown timer.\n     */\n    function startCountdownTimer() {\n        timeRemaining = widget.dataset.maxRecordingDuration * 1000;\n        resumeCountdownTimer();\n        updateTimerDisplay();\n    }\n\n    /**\n     * Stop the countdown timer.\n     */\n    function stopCountdownTimer() {\n        timeRemaining = stopTime - Date.now();\n        if (countdownTicker !== 0) {\n            clearInterval(countdownTicker);\n            countdownTicker = 0;\n        }\n    }\n\n    /**\n     * Start or resume the countdown timer.\n     */\n    function resumeCountdownTimer() {\n        stopTime = Date.now() + timeRemaining;\n        if (countdownTicker === 0) {\n            countdownTicker = setInterval(updateTimerDisplay, 100);\n        }\n    }\n\n    /**\n     * Update the countdown timer, and stop recording if we have reached 0.\n     */\n    function updateTimerDisplay() {\n        const millisecondsRemaining = stopTime - Date.now();\n        const secondsRemaining = Math.round(millisecondsRemaining / 1000);\n        const secondsStart = widget.dataset.maxRecordingDuration - secondsRemaining;\n        // Set time label for elements.\n        setLabelForTimer(secondsStart, secondsRemaining);\n        if (millisecondsRemaining <= 0) {\n            stopRecording();\n        }\n    }\n\n    /**\n     * Get time label for timer.\n     *\n     * @param {number} seconds The time in seconds.\n     * @return {string} The label for timer. e.g. '00:00' or '10:00'.\n     */\n    function getTimeLabelForTimer(seconds) {\n        const secs = seconds % 60;\n        const mins = Math.round((seconds - secs) / 60);\n\n        return M.util.get_string('timedisplay', 'qtype_recordrtc',\n            {mins: pad(mins), secs: pad(secs)});\n    }\n\n    /**\n     * Set time label for timer.\n     * We need to update the labels for both the timer back(whose background color is white) and\n     * timer front (with blue background) to create a text effect that contrasts with the background color.\n     *\n     * @param {Number} secondsStart The second start. e.g: With duration 1 minute\n     * secondsStart will start from 0 and increase up to 60.\n     * @param {Number} secondsRemaining The second remaining. e.g: With duration 1 minute\n     * secondsRemaining will decrease from 60 to 0.\n     */\n    function setLabelForTimer(secondsStart, secondsRemaining) {\n        // Set time label for timer back.\n        backTimeEnd.innerText = getTimeLabelForTimer(secondsRemaining);\n        backtimeStart.innerText = getTimeLabelForTimer(secondsStart);\n        // Set time label for timer front.\n        frontTimeEnd.innerText = getTimeLabelForTimer(secondsRemaining);\n        fronttimeStart.innerText = getTimeLabelForTimer(secondsStart);\n    }\n\n    /**\n     * Zero-pad a string to be at least two characters long.\n     *\n     * @param {number} val e.g. 1 or 10\n     * @return {string} e.g. '01' or '10'.\n     */\n    function pad(val) {\n        const valString = val + '';\n\n        if (valString.length < 2) {\n            return '0' + valString;\n        } else {\n            return '' + valString;\n        }\n    }\n\n    /**\n     * Trigger the upload of the recorded media back to Moodle.\n     */\n    async function uploadMediaToServer() {\n        setButtonLabel('uploadpreparing');\n\n        if (widget.dataset.convertToMp3) {\n            const mp3DataBlob = await convertOggToMp3(mediaElement.src);\n            mediaElement.src = URL.createObjectURL(mp3DataBlob);\n            uploadBlobToRepository(mp3DataBlob, widget.dataset.recordingFilename.replace(/\\.ogg$/, '.mp3'));\n        } else {\n            // First we need to get the media data from the media element.\n            const oggDataBlob = await fetchOggData(mediaElement.src, 'blob');\n            uploadBlobToRepository(oggDataBlob, widget.dataset.recordingFilename);\n        }\n    }\n\n    /**\n     * Convert audio data to MP3.\n     *\n     * @param {string} sourceUrl URL from which to fetch the Ogg audio file to convert.\n     * @returns {Promise<Blob>}\n     */\n    async function convertOggToMp3(sourceUrl) {\n        const lamejs = await getLameJs();\n        const oggData = await fetchOggData(sourceUrl, 'arraybuffer');\n        const audioBuffer = await (new AudioContext()).decodeAudioData(oggData);\n        const [left, right] = getRawAudioDataFromBuffer(audioBuffer);\n        return await createMp3(lamejs, audioBuffer.numberOfChannels, audioBuffer.sampleRate, left, right);\n    }\n\n    /**\n     * Helper to wrap loading the lamejs library.\n     *\n     * @returns {Promise<*>} access to the lamejs library.\n     */\n    async function getLameJs() {\n        return await import(M.cfg.wwwroot + '/question/type/recordrtc/js/lamejs@1.2.1a-7-g582bbba/lame.min.js');\n    }\n\n    /**\n     * Load Ogg data from a URL and return as an ArrayBuffer or a Blob.\n     *\n     * @param {string} sourceUrl URL from which to fetch the Ogg audio data.\n     * @param {XMLHttpRequestResponseType} responseType 'arraybuffer' or 'blob'.\n     * @returns {Promise<ArrayBuffer|Blob>} the audio data in the requested structure.\n     */\n    function fetchOggData(sourceUrl, responseType) {\n        return new Promise((resolve) => {\n            const fetchRequest = new XMLHttpRequest();\n            fetchRequest.open('GET', sourceUrl);\n            fetchRequest.responseType = responseType;\n            fetchRequest.addEventListener('load', () => {\n                resolve(fetchRequest.response);\n            });\n            fetchRequest.send();\n        });\n    }\n\n    /**\n     * Extract the raw sample data from an AudioBuffer.\n     *\n     * @param {AudioBuffer} audioIn an audio buffer, e.g. from a call to decodeAudioData.\n     * @returns {Int16Array[]} for each audio channel, a Int16Array of the samples.\n     */\n    function getRawAudioDataFromBuffer(audioIn) {\n        const channelData = [];\n\n        for (let channel = 0; channel < audioIn.numberOfChannels; channel++) {\n            const rawChannelData = audioIn.getChannelData(channel);\n            channelData[channel] = new Int16Array(audioIn.length);\n            for (let i = 0; i < audioIn.length; i++) {\n                // This is not the normal code given for this conversion (which can be\n                // found in git history) but this is 10x faster, and surely good enough.\n                channelData[channel][i] = rawChannelData[i] * 0x7FFF;\n            }\n        }\n\n        return channelData;\n    }\n\n    /**\n     * Convert some audio data to MP3.\n     *\n     * @param {*} lamejs lamejs library from getLameJs().\n     * @param {int} channels number of audio channels (1 or 2 supported).\n     * @param {int} sampleRate sample rate of the audio to encode.\n     * @param {Int16Array} left audio data for the left or only channel.\n     * @param {Int16Array|null} right audio data for the right channel, if any.\n     * @returns {Blob} representing an MP3 file.\n     */\n    async function createMp3(lamejs, channels, sampleRate, left, right = null) {\n        const buffer = [];\n        const mp3enc = new lamejs.Mp3Encoder(channels, sampleRate, mediaSettings.bitRate / 1000);\n        let remaining = left.length;\n        const samplesPerFrame = 1152;\n        let mp3buf;\n\n        await setPreparingPercent(0, left.length);\n        for (let i = 0; remaining >= samplesPerFrame; i += samplesPerFrame) {\n            if (channels === 1) {\n                const mono = left.subarray(i, i + samplesPerFrame);\n                mp3buf = mp3enc.encodeBuffer(mono);\n            } else {\n                const leftChunk = left.subarray(i, i + samplesPerFrame);\n                const rightChunk = right.subarray(i, i + samplesPerFrame);\n                mp3buf = mp3enc.encodeBuffer(leftChunk, rightChunk);\n            }\n            if (mp3buf.length > 0) {\n                buffer.push(mp3buf);\n            }\n            remaining -= samplesPerFrame;\n            if (i % (10 * samplesPerFrame) === 0) {\n                await setPreparingPercent(i, left.length);\n            }\n        }\n        const d = mp3enc.flush();\n        if (d.length > 0) {\n            buffer.push(new Int8Array(d));\n        }\n        await setPreparingPercent(left.length, left.length);\n\n        return new Blob(buffer, {type: \"audio/mp3\"});\n    }\n\n    /**\n     * Set the label on the upload button to a progress message including a percentage.\n     *\n     * @param {number} current number done so far.\n     * @param {number} total number to do in total.\n     */\n    async function setPreparingPercent(current, total) {\n        setButtonLabel('uploadpreparingpercent', Math.round(100 * current / total));\n        // Next like is a hack to ensure the screen acutally updates.\n        await new Promise(resolve => requestAnimationFrame(resolve));\n    }\n\n    /**\n     * Upload the audio file to the Moodle draft file repository.\n     *\n     * @param {Blob} blob data to upload.\n     * @param {string} recordingFilename the filename to use for the uplaod.\n     */\n    function uploadBlobToRepository(blob, recordingFilename) {\n\n        // Create FormData to send to PHP filepicker-upload script.\n        const formData = new FormData();\n        formData.append('repo_upload_file', blob, recordingFilename);\n        formData.append('sesskey', M.cfg.sesskey);\n        formData.append('repo_id', uploadInfo.uploadRepositoryId);\n        formData.append('itemid', uploadInfo.draftItemId);\n        formData.append('savepath', '/');\n        formData.append('ctx_id', uploadInfo.contextId);\n        formData.append('overwrite', '1');\n\n        const uploadRequest = new XMLHttpRequest();\n        uploadRequest.addEventListener('readystatechange', handleUploadReadyStateChanged);\n        uploadRequest.upload.addEventListener('progress', handleUploadProgress);\n        uploadRequest.addEventListener('error', handleUploadError);\n        uploadRequest.addEventListener('abort', handleUploadAbort);\n        uploadRequest.open('POST', M.cfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n        uploadRequest.send(formData);\n    }\n\n    /**\n     * Callback for when the upload completes.\n     * @param {ProgressEvent} e\n     */\n    function handleUploadReadyStateChanged(e) {\n        const uploadRequest = e.target;\n        if (uploadRequest.readyState !== 4) {\n            return; // Not finished yet. We will get more of these events when it is.\n        }\n\n        const response = JSON.parse(uploadRequest.responseText);\n        if (response.errorcode) {\n            handleUploadError(); // Moodle sends back errors with a 200 status code for some reason!\n        }\n\n        if (uploadRequest.status === 200) {\n            // When request finished and successful.\n            setButtonLabel('recordagainx');\n            button.classList.remove('btn-outline-danger');\n            enableAllButtons();\n        } else if (uploadRequest.status === 404) {\n            setPlaceholderMessage('uploadfailed404');\n            enableAllButtons();\n        }\n    }\n\n    /**\n     * Callback for updating the upload progress.\n     * @param {ProgressEvent} e\n     */\n    function handleUploadProgress(e) {\n        setButtonLabel('uploadprogress', Math.round(e.loaded / e.total * 100) + '%');\n    }\n\n    /**\n     * Callback for when the upload fails with an error.\n     */\n    function handleUploadError() {\n        setPlaceholderMessage('uploadfailed');\n        enableAllButtons();\n    }\n\n    /**\n     * Callback for when the upload fails with an error.\n     */\n    function handleUploadAbort() {\n        setPlaceholderMessage('uploadaborted');\n        enableAllButtons();\n    }\n\n    /**\n     * Change the label on the start/stop button.\n     *\n     * @param {string} langString\n     * @param {string|null} [a] optional variable to populate placeholder with\n     */\n    function setButtonLabel(langString, a) {\n        if (a === undefined) {\n            // Seemingly unnecessary space inside the span is needed for screen-readers, and it must be a non-breaking space.\n            a = '<span class=\"sr-only\">&nbsp;' + widget.dataset.widgetName + '</span>';\n        }\n        button.innerHTML = M.util.get_string(langString, 'qtype_recordrtc', a);\n    }\n\n    /**\n     * Change the label on the pause button.\n     *\n     * @param {string} langString\n     */\n    function setPauseButtonLabel(langString) {\n        pauseButton.innerText = M.util.get_string(langString, 'qtype_recordrtc');\n    }\n\n    /**\n     * Display a message in the upload progress area.\n     *\n     * @param {string} langString\n     */\n    function setPlaceholderMessage(langString) {\n        noMediaPlaceholder.textContent = M.util.get_string(langString, 'qtype_recordrtc');\n        mediaElement.parentElement.classList.add('hide');\n        noMediaPlaceholder.classList.remove('hide');\n    }\n\n    /**\n     * Select best options for the recording codec.\n     *\n     * @returns {Object}\n     */\n    function getRecordingOptions() {\n        const options = {};\n\n        // Get the relevant bit rates from settings.\n        if (mediaSettings.name === 'audio') {\n            options.audioBitsPerSecond = mediaSettings.bitRate;\n        } else if (mediaSettings.name === 'video' || mediaSettings.name === 'screen') {\n            options.videoBitsPerSecond = mediaSettings.bitRate;\n            options.videoWidth = mediaSettings.width;\n            options.videoHeight = mediaSettings.height;\n\n            // Go through our list of mimeTypes, and take the first one that will work.\n            for (let i = 0; i < mediaSettings.mimeTypes.length; i++) {\n                if (MediaRecorder.isTypeSupported(mediaSettings.mimeTypes[i])) {\n                    options.mimeType = mediaSettings.mimeTypes[i];\n                    break;\n                }\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * Enable all buttons in the question.\n     */\n    function enableAllButtons() {\n        disableOrEnableButtons(true);\n        owner.notifyButtonStatesChanged();\n    }\n\n    /**\n     * Disable all buttons in the question.\n     */\n    function disableAllButtons() {\n        disableOrEnableButtons(false);\n    }\n\n    /**\n     * Disables/enables other question buttons when current widget started recording/finished recording.\n     *\n     * @param {boolean} enabled true if the button should be enabled.\n     */\n    function disableOrEnableButtons(enabled = false) {\n        document.querySelectorAll('.que.recordrtc').forEach(record => {\n            record.querySelectorAll('button, input[type=submit], input[type=button]').forEach(button => {\n                button.disabled = !enabled;\n            });\n        });\n    }\n\n    /**\n     * Pause/resume the progressbar state.\n     */\n    function toggleProgressbarState() {\n        const running = progressBar.style.animationPlayState || 'running';\n        progressBar.style.animationPlayState = running === 'running' ? 'paused' : 'running';\n    }\n}\n\n/**\n * Object that controls the settings for recording audio.\n *\n * @param {string} bitRate desired audio bitrate.\n * @constructor\n */\nfunction AudioSettings(bitRate) {\n    this.name = 'audio';\n    this.bitRate = parseInt(bitRate, 10);\n    this.mediaConstraints = {\n        audio: true\n    };\n    this.mimeTypes = [\n        'audio/webm;codecs=opus',\n        'audio/ogg;codecs=opus'\n    ];\n}\n\n/**\n * Object that controls the settings for recording video.\n *\n * @param {string} bitRate desired video bitrate.\n * @param {string} width desired width.\n * @param {string} height desired height.\n * @constructor\n */\nfunction VideoSettings(bitRate, width, height) {\n    this.name = 'video';\n    this.bitRate = parseInt(bitRate, 10);\n    this.width = parseInt(width, 10);\n    this.height = parseInt(height, 10);\n    this.mediaConstraints = {\n        audio: true,\n        video: {\n            width: {ideal: this.width},\n            height: {ideal: this.height}\n        }\n    };\n    this.mimeTypes = [\n        'video/webm;codecs=vp9,opus',\n        'video/webm;codecs=h264,opus',\n        'video/webm;codecs=vp8,opus'\n    ];\n}\n\n/**\n * Object that controls the settings for recording screen.\n *\n * @param {string} bitRate desired screen bitrate.\n * @param {string} width desired width.\n * @param {string} height desired height.\n * @constructor\n */\nfunction ScreenSettings(bitRate, width, height) {\n    this.name = 'screen';\n    this.bitRate = parseInt(bitRate, 10);\n    this.width = parseInt(width, 10);\n    this.height = parseInt(height, 10);\n    this.mediaConstraints = {\n        audio: true,\n        systemAudio: 'exclude',\n        video: {\n            displaySurface: 'monitor',\n            frameRate: {ideal: 24},\n            // Currently, Safari does not support ideal constraints for width and height with screen sharing feature.\n            // It may be supported in version 16.4.\n            width: {max: this.width},\n            height: {max: this.height},\n        }\n    };\n\n    // We use vp8 as the default codec. If it is not supported, we will switch to another codec.\n    this.mimeTypes = [\n        'video/webm;codecs=vp8,opus',\n        'video/webm;codecs=vp9,opus',\n        'video/webm;codecs=h264,opus',\n    ];\n}\n\n/**\n * Represents one record audio or video question.\n *\n * @param {string} questionId id of the outer question div.\n * @param {Object} settings like audio bit rate.\n * @constructor\n */\nfunction RecordRtcQuestion(questionId, settings) {\n    const questionDiv = document.getElementById(questionId);\n\n    // Check if the RTC API can work here.\n    const result = checkCanWork();\n    if (result === 'nothttps') {\n        questionDiv.querySelector('.https-warning').classList.remove('hide');\n        return;\n    } else if (result === 'nowebrtc') {\n        questionDiv.querySelector('.no-webrtc-warning').classList.remove('hide');\n        return;\n    }\n\n    // Make the callback functions available.\n    this.showAlert = showAlert;\n    this.notifyRecordingComplete = notifyRecordingComplete;\n    this.notifyButtonStatesChanged = setSubmitButtonState;\n    const thisQuestion = this;\n\n    // We may have more than one widget in a question.\n    questionDiv.querySelectorAll('.qtype_recordrtc-audio-widget, .qtype_recordrtc-video-widget, .qtype_recordrtc-screen-widget')\n        .forEach(function(widget) {\n            // Get the appropriate options.\n            let typeInfo;\n            switch (widget.dataset.mediaType) {\n                case 'audio':\n                    typeInfo = new AudioSettings(settings.audioBitRate);\n                    break;\n                case 'screen':\n                    typeInfo = new ScreenSettings(settings.screenBitRate, settings.screenWidth, settings.screenHeight);\n                    break;\n                default:\n                    typeInfo = new VideoSettings(settings.videoBitRate, settings.videoWidth, settings.videoHeight);\n                    break;\n            }\n\n            // Create the recorder.\n            new Recorder(widget, typeInfo, thisQuestion, settings);\n            return 'Not used';\n        });\n    setSubmitButtonState();\n\n    /**\n     * Set the state of the question's submit button.\n     *\n     * If any recorder does not yet have a recording, then disable the button.\n     * Otherwise, enable it.\n     */\n    function setSubmitButtonState() {\n        let anyRecorded = false;\n        questionDiv.querySelectorAll('.qtype_recordrtc-audio-widget, .qtype_recordrtc-video-widget, .qtype_recordrtc-screen-widget')\n            .forEach(function(widget) {\n                if (widget.dataset.state === 'recorded') {\n                    anyRecorded = true;\n                }\n            });\n        const submitButton = questionDiv.querySelector('input.submit[type=submit]');\n        if (submitButton) {\n            submitButton.disabled = !anyRecorded;\n        }\n    }\n\n    /**\n     * Show a modal alert.\n     *\n     * @param {string} subject Subject is the content of the alert (which error the alert is for).\n     * @return {Promise}\n     */\n    function showAlert(subject) {\n        return ModalFactory.create({\n            type: ModalFactory.types.ALERT,\n            title: M.util.get_string(subject + '_title', 'qtype_recordrtc'),\n            body: M.util.get_string(subject, 'qtype_recordrtc'),\n        }).then(function(modal) {\n            modal.show();\n            return modal;\n        });\n    }\n\n    /**\n     * Callback called when the recording is completed.\n     *\n     * @param {Recorder} recorder the recorder.\n     */\n    function notifyRecordingComplete(recorder) {\n        recorder.uploadMediaToServer();\n    }\n}\n\n/**\n * Initialise a record audio or video question.\n *\n * @param {string} questionId id of the outer question div.\n * @param {Object} settings like audio bit rate.\n */\nfunction init(questionId, settings) {\n    M.util.js_pending('init-' + questionId);\n    new RecordRtcQuestion(questionId, settings);\n    M.util.js_complete('init-' + questionId);\n}\n\nexport {\n    init\n};\n"],"names":["questionId","settings","M","util","js_pending","RecordRtcQuestion","js_complete","Recorder","widget","mediaSettings","owner","uploadInfo","recorder","this","mediaStream","mediaRecorder","chunks","bytesRecordedSoFar","timeRemaining","stopTime","countdownTicker","button","querySelector","pauseButton","controlRow","mediaElement","name","noMediaPlaceholder","timeDisplay","progressBar","backTimeEnd","backtimeStart","frontTimeEnd","fronttimeStart","handleScreenSharingError","error","debug","startSaving","handleCaptureStarting","stream","srcObject","muted","getVideoTracks","addEventListener","handleStopSharing","play","controls","dataset","state","setButtonLabel","disabled","focus","MediaRecorder","options","audioBitsPerSecond","bitRate","videoBitsPerSecond","videoWidth","width","videoHeight","height","i","mimeTypes","length","isTypeSupported","mimeType","getRecordingOptions","ondataavailable","handleDataAvailable","onpause","onstop","handleRecordingHasStopped","start","style","animationDuration","maxRecordingDuration","classList","add","resumeCountdownTimer","updateTimerDisplay","parentElement","remove","blur","controlEl","contains","click","enableAllButtons","event","data","size","maxUploadSize","localStorage","getItem","removeItem","setItem","stopRecording","showAlert","push","core_formchangechecker","window","location","pathname","endsWith","set_form_changed","stopCountdownTimer","setPauseButtonLabel","animationPlayState","stop","tracks","getTracks","blob","Blob","type","src","URL","createObjectURL","notifyRecordingComplete","handleCaptureFailed","setPlaceholderMessage","stringName","replace","toLowerCase","Date","now","clearInterval","setInterval","millisecondsRemaining","secondsRemaining","Math","round","setLabelForTimer","getTimeLabelForTimer","seconds","secs","mins","get_string","pad","secondsStart","innerText","val","valString","fetchOggData","sourceUrl","responseType","Promise","resolve","fetchRequest","XMLHttpRequest","open","response","send","setPreparingPercent","current","total","requestAnimationFrame","uploadBlobToRepository","recordingFilename","formData","FormData","append","cfg","sesskey","uploadRepositoryId","draftItemId","contextId","uploadRequest","handleUploadReadyStateChanged","upload","handleUploadProgress","handleUploadError","handleUploadAbort","wwwroot","e","target","readyState","JSON","parse","responseText","errorcode","status","loaded","langString","a","undefined","widgetName","innerHTML","textContent","disableOrEnableButtons","notifyButtonStatesChanged","enabled","document","querySelectorAll","forEach","record","toggleProgressbarState","running","clickedButton","closest","preventDefault","parseInt","navigator","mediaDevices","getDisplayMedia","mediaConstraints","then","catch","getUserMedia","startRecording","enumerateDevices","audio","micStream","composedStream","MediaStream","track","kind","addTrack","getAudioTracks","micTrack","pause","resume","uploadMediaToServer","convertToMp3","mp3DataBlob","lamejs","getLameJs","oggData","audioBuffer","AudioContext","decodeAudioData","left","right","audioIn","channelData","channel","numberOfChannels","rawChannelData","getChannelData","Int16Array","getRawAudioDataFromBuffer","channels","sampleRate","buffer","mp3enc","Mp3Encoder","remaining","samplesPerFrame","mp3buf","mono","subarray","encodeBuffer","leftChunk","rightChunk","d","flush","Int8Array","createMp3","convertOggToMp3","AudioSettings","VideoSettings","video","ideal","ScreenSettings","systemAudio","displaySurface","frameRate","max","questionDiv","getElementById","result","protocol","host","subject","ModalFactory","create","types","ALERT","title","body","modal","show","setSubmitButtonState","thisQuestion","anyRecorded","submitButton","typeInfo","mediaType","audioBitRate","screenBitRate","screenWidth","screenHeight","videoBitRate"],"mappings":"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"}