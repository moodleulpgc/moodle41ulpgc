{"version":3,"file":"crossword_clue.min.js","sources":["../src/crossword_clue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Crossword clue class, handle any action relative to clue.\n *\n * @module qtype_crossword/crossword_clue\n * @copyright 2022 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {CrosswordQuestion} from 'qtype_crossword/crossword_question';\n\nexport class CrosswordClue extends CrosswordQuestion {\n\n    /**\n     * Constructor.\n     *\n     * @param {Object} options The settings for crossword.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Set up for clue section.\n     */\n    setUpClue() {\n        let {words, readonly} = this.options;\n        const clueEls = this.options.crosswordEl\n            .closest('.qtype_crossword-grid-wrapper')\n            .querySelectorAll('.contain-clue .wrap-clue');\n        clueEls.forEach(el => {\n            const questionId = el.dataset.questionid;\n            let word = words.find(o => o.number === parseInt(questionId));\n            if (word) {\n                const inputEl = el.querySelector('input');\n                // Retrieve special characters list.\n                const ignoreIndexes = this.getIgnoreIndexByAnswerNumber(word.number, false);\n                const wordString = this.makeUnderscore(word.length - inputEl.value.length);\n                // Add special characters to the answer, then set it to the answer input.\n                inputEl.value += this.mapAnswerAndSpecialLetter(wordString, ignoreIndexes[0]);\n                if (!readonly) {\n                    inputEl.disabled = false;\n                }\n                // Add event for input.\n                this.addEventForClueInput(inputEl, word);\n            }\n        });\n    }\n\n    /**\n     * Add event to word input element.\n     *\n     * @param {Element} el The input element.\n     * @param {String} word The word data.\n     */\n    addEventForClueInput(el, word) {\n        const {readonly} = this.options;\n        let startSelection = 0;\n        if (readonly) {\n            return;\n        }\n        el.addEventListener('click', (e) => {\n            const {words} = this.options;\n            const wordNumber = e.target.closest('.wrap-clue').dataset.questionid;\n            const wordObj = words.find(o => o.number === parseInt(wordNumber));\n            let startIndex = e.target.selectionStart;\n            if (startIndex >= word.length) {\n                startIndex = word.length - 1;\n            }\n            // Based on the selected letter index on the answer index,\n            // we will find the corresponding crossword cell index.\n            startIndex = this.findCellIndexFromAnswerIndex(wordObj, startIndex);\n            this.focusCellByStartIndex(startIndex, word);\n            this.focusClue();\n            this.setStickyClue();\n        });\n\n        el.addEventListener('focus', (e) => {\n            e.target.dispatchEvent(new Event('click'));\n        });\n        el.addEventListener('beforeinput', (e) => {\n            if (e.inputType === 'insertText' && e.data) {\n                this.handleInsertedCharacterToElement(e, e.data);\n            }\n        });\n\n        el.addEventListener('input', (e) => {\n            if (e.inputType === 'deleteContentBackward') {\n                this.handleAndSyncDeletedStringToElement(e.target, e.target.value);\n            }\n        });\n\n        el.addEventListener('keypress', (e) => {\n            e.preventDefault();\n            this.handleInsertedCharacterToElement(e, e.key);\n        });\n\n        el.addEventListener('compositionstart', (evt) => {\n            const selection = evt.target.selectionStart;\n            startSelection = selection;\n        });\n\n        el.addEventListener('compositionend', (evt) => {\n            evt.preventDefault();\n            evt.stopPropagation();\n            const {wordNumber} = this.options;\n            const selection = evt.target.selectionStart;\n            let key = evt.data.normalize('NFKC');\n            let currentSelection = startSelection;\n            evt.target.setSelectionRange(selection, selection);\n            key.split('').forEach(char => {\n                const result = this.handleTypingData(evt, wordNumber, word, currentSelection, char);\n                if (result) {\n                    currentSelection++;\n                }\n            });\n        });\n\n        el.addEventListener('keyup', (event) => {\n            event.preventDefault();\n            const {words, wordNumber} = this.options;\n            const {key, target} = event;\n            let {value} = target;\n            let isValidKey = false;\n            let maxLength = parseInt(target.getAttribute('maxlength'));\n            if ([this.ARROW_LEFT, this.ARROW_RIGHT].includes(key)) {\n                isValidKey = true;\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                // Based on the selected letter index of the answer input,\n                // we will find the cell with the corresponding letter index attribute.\n                const startIndex = this.findCellIndexFromAnswerIndex(word, target.selectionStart, false);\n                const gEl = this.options.crosswordEl\n                    .querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n                if (gEl) {\n                    this.toggleHighlight(word, gEl);\n                }\n            }\n            if (key === this.DELETE || key === this.BACKSPACE) {\n                this.handleAndSyncDeletedStringToElement(target, value);\n            }\n\n            if (key === this.END || key === this.HOME || key === this.ARROW_UP || key === this.ARROW_DOWN) {\n                isValidKey = true;\n                let startIndex = 0;\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                if (!word) {\n                    return;\n                }\n                if (key === this.END || key === this.ARROW_DOWN) {\n                    startIndex = word.length - 1;\n                }\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n\n            if (!isValidKey && startSelection >= maxLength) {\n                event.target.value = value.slice(0, maxLength);\n            }\n        });\n\n        el.addEventListener('paste', (event) => {\n            event.preventDefault();\n            const {words, wordNumber} = this.options;\n            const word = words.find(o => o.number === parseInt(wordNumber));\n            let selection = event.target.selectionStart;\n            let value = (event.clipboardData || window.clipboardData).getData('text');\n            let ignoreIndexes = this.getIgnoreIndexByAnswerNumber(word.number);\n            // Remove invalid characters, normarlize NFKC.\n            value = this.replaceText(value).normalize('NFKC');\n            if (value === '') {\n                return;\n            }\n            let letterIndex = 1;\n            value.split('').every(char => {\n                // Stop function If the character overflows.\n                if (letterIndex > word.length - ignoreIndexes.length) {\n                    return false;\n                }\n                const result = this.handleTypingData(event, wordNumber, word, selection, char);\n                letterIndex++;\n                // Find the valid index.\n                if (result) {\n                    for (let index = selection + 1; index < word.length; index++) {\n                        if (!ignoreIndexes.includes(index)) {\n                            selection = index;\n                            break;\n                        }\n                    }\n                }\n                return true;\n            });\n        });\n\n        el.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.key.toLowerCase() === this.Z_KEY) {\n                e.preventDefault();\n            }\n            if (e.key === this.ENTER) {\n                e.preventDefault();\n            }\n        });\n\n        el.addEventListener('cut', (event) => {\n            const selectString = document.getSelection().toString();\n            const startIndex = event.target.selectionStart;\n            let {value} = event.target;\n            value = value.substring(0, startIndex) +\n                value.substring(startIndex + selectString.length) +\n                this.makeUnderscore(selectString.length);\n            event.target.value = value;\n            event.clipboardData.setData('text/plain', selectString);\n            event.preventDefault();\n            event.target.setSelectionRange(startIndex, startIndex);\n            // In case the user cuts off the entire answer, we need to update the crossword grid.\n            this.syncLettersByText(value, false);\n        });\n    }\n\n    /**\n     * Handle typing data.\n     *\n     * @param {Object} evt Event data.\n     * @param {Number} wordNumber The word number.\n     * @param {Object} word The word object.\n     * @param {Number} selectionIndex The position of cursor selection.\n     * @param {String} char The character.\n     *\n     * @return {Boolean} True if the data is valid.\n     */\n    handleTypingData(evt, wordNumber, word, selectionIndex, char) {\n        const [count, gEl] = this.findTheClosestCell(wordNumber, word, selectionIndex);\n        if (this.replaceText(char) === '') {\n            return false;\n        }\n        if (gEl) {\n            gEl.querySelector('text.crossword-cell-text').innerHTML = char.toUpperCase();\n            this.bindDataToClueInput(gEl, char.toUpperCase());\n        }\n\n        // Go to next letter.\n        const [letterIndex, nexEl] = this.findTheClosestCell(wordNumber, word, count + 1);\n        if (nexEl) {\n            this.toggleHighlight(word, nexEl);\n            evt.target.setSelectionRange(letterIndex, letterIndex);\n        }\n        return true;\n    }\n\n    /**\n     * Focus cell base on the start index.\n     *\n     * @param {Element} startIndex The start index.\n     * @param {String} word The word data.\n     */\n    focusCellByStartIndex(startIndex, word) {\n        let position = this.calculatePosition(word, startIndex);\n        const rect = this.options.crosswordEl.querySelector(`g rect[x='${position.x}'][y='${position.y}']`);\n        if (rect) {\n            this.options.wordNumber = word.number;\n            this.toggleHighlight(word, rect.closest('g'));\n            this.updateLetterIndexForCells(word);\n        }\n    }\n\n    /**\n     * Focus crossword cell from the start index.\n     *\n     * @param {Element} target The element.\n     * @param {Number} startIndex The start index.\n     */\n    syncFocusCellAndInput(target, startIndex) {\n        const {wordNumber} = this.options;\n        const gEl = this.options.crosswordEl.querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n        target.setSelectionRange(startIndex, startIndex);\n        if (gEl) {\n            this.toggleFocus(gEl);\n        }\n    }\n\n    /**\n     * Toggle the focus cell.\n     *\n     * @param {Element} gEl The word letter.\n     */\n    toggleFocus(gEl) {\n        const focused = this.options.crosswordEl.querySelector('g rect.crossword-cell-focussed');\n        if (focused) {\n            focused.classList.remove('crossword-cell-focussed');\n            focused.classList.add('crossword-cell-highlighted');\n        }\n        gEl.querySelector('rect').classList.add('crossword-cell-focussed');\n    }\n\n    /**\n     *\n     * Add underscore to deleted string and sync it to crossword clue input.\n     *\n     * @param {Element} target The element target\n     * @param {String} value the string input after we deleted single or multiples character.\n     */\n    handleAndSyncDeletedStringToElement(target, value) {\n        const {words, wordNumber} = this.options;\n        const word = words.find(o => o.number === parseInt(wordNumber));\n        if (!word) {\n            return;\n        }\n        let startIndex = target.selectionStart;\n        const selectionLength = word.length - value.length;\n        const underScore = this.makeUnderscore(selectionLength);\n        // Insert underscore to deleted string.\n        target.value = [value.slice(0, startIndex), underScore, value.slice(startIndex)].join('');\n        // In case the user deletes the entire answer we need to update the crossword grid.\n        this.syncLettersByText(target.value, false);\n        this.syncFocusCellAndInput(target, startIndex);\n    }\n\n    /**\n     * Insert the character to clue input.\n     *\n     * @param {Object} event Event data.\n     * @param {String} value the character we are inserted to the clue input.\n     */\n    handleInsertedCharacterToElement(event, value) {\n        const {words, wordNumber} = this.options;\n        const word = words.find(o => o.number === parseInt(wordNumber));\n        let startIndex = event.target.selectionStart;\n        value = this.replaceText(value).normalize('NFKC');\n        if (value === '') {\n            return;\n        }\n        this.handleTypingData(event, wordNumber, word, startIndex, value);\n    }\n}\n"],"names":["CrosswordClue","CrosswordQuestion","constructor","options","setUpClue","words","readonly","this","crosswordEl","closest","querySelectorAll","forEach","el","questionId","dataset","questionid","word","find","o","number","parseInt","inputEl","querySelector","ignoreIndexes","getIgnoreIndexByAnswerNumber","wordString","makeUnderscore","length","value","mapAnswerAndSpecialLetter","disabled","addEventForClueInput","startSelection","addEventListener","e","wordNumber","target","wordObj","startIndex","selectionStart","findCellIndexFromAnswerIndex","focusCellByStartIndex","focusClue","setStickyClue","dispatchEvent","Event","inputType","data","handleInsertedCharacterToElement","handleAndSyncDeletedStringToElement","preventDefault","key","evt","selection","stopPropagation","normalize","currentSelection","setSelectionRange","split","char","handleTypingData","event","isValidKey","maxLength","getAttribute","ARROW_LEFT","ARROW_RIGHT","includes","gEl","toggleHighlight","DELETE","BACKSPACE","END","HOME","ARROW_UP","ARROW_DOWN","syncFocusCellAndInput","slice","clipboardData","window","getData","replaceText","letterIndex","every","result","index","ctrlKey","toLowerCase","Z_KEY","ENTER","selectString","document","getSelection","toString","substring","setData","syncLettersByText","selectionIndex","count","findTheClosestCell","innerHTML","toUpperCase","bindDataToClueInput","nexEl","position","calculatePosition","rect","x","y","updateLetterIndexForCells","toggleFocus","focused","classList","remove","add","selectionLength","underScore","join"],"mappings":"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"}